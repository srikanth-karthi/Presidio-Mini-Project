// <auto-generated />
using System;
using Job_Portal_Application.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job_Portal_Application.Migrations
{
    [DbContext(typeof(JobportalContext))]
    [Migration("20240529190416_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Job_Portal_Application.Models.AreasOfInterest", b =>
                {
                    b.Property<Guid>("AreasOfInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Lpa")
                        .HasColumnType("real");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AreasOfInterestId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("AreasOfInterests");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanySize")
                        .HasColumnType("int");

                    b.Property<string>("CompanyWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HasCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Education", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndYear")
                        .HasColumnType("date");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCurrentlyStudying")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EducationId");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("EndYear")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExperienceId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DatePosted")
                        .HasColumnType("date");

                    b.Property<float?>("ExperienceRequired")
                        .HasColumnType("real");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<float?>("Lpa")
                        .HasColumnType("real");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TitleId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobActivity", b =>
                {
                    b.Property<Guid>("UserJobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ResumeViewed")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserJobId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobActivities");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobSkills", b =>
                {
                    b.Property<Guid>("JobSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobSkillsId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skill_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = new Guid("34fc10c1-e426-48e2-bdc9-346269933828"),
                            Skill_Name = "HTML"
                        },
                        new
                        {
                            SkillId = new Guid("fbc52102-d6c7-49b0-a47e-00f7be40a1b9"),
                            Skill_Name = "CSS"
                        },
                        new
                        {
                            SkillId = new Guid("8b950496-e8e6-469b-b67e-3f6911a67dde"),
                            Skill_Name = "JavaScript"
                        },
                        new
                        {
                            SkillId = new Guid("f73d59d8-de3d-4c38-9d7b-3b5fb1d310de"),
                            Skill_Name = "TypeScript"
                        },
                        new
                        {
                            SkillId = new Guid("745444cf-4a2e-477c-852a-efd0d257711a"),
                            Skill_Name = "React"
                        },
                        new
                        {
                            SkillId = new Guid("f514c09e-21b9-44ff-a85b-d0e9fee22194"),
                            Skill_Name = "Angular"
                        },
                        new
                        {
                            SkillId = new Guid("b4669812-a6b8-4d03-9d14-7ad2e200a34e"),
                            Skill_Name = "Vue"
                        },
                        new
                        {
                            SkillId = new Guid("dc872140-2d08-4960-a485-5361b3ae221e"),
                            Skill_Name = "Node.js"
                        },
                        new
                        {
                            SkillId = new Guid("4c4a5f4b-9b17-4ed0-884c-fff074c7520d"),
                            Skill_Name = "Express"
                        },
                        new
                        {
                            SkillId = new Guid("06e35822-fce4-4211-ae6e-f52393189407"),
                            Skill_Name = "Python"
                        },
                        new
                        {
                            SkillId = new Guid("a248b731-b010-4ef9-ba89-38eccd0b801e"),
                            Skill_Name = "Django"
                        },
                        new
                        {
                            SkillId = new Guid("9a73a72c-3c8b-4511-8e22-2e21b2ee0ab1"),
                            Skill_Name = "Flask"
                        },
                        new
                        {
                            SkillId = new Guid("bf5b165c-ea6b-4f91-8074-5c2c562bbc88"),
                            Skill_Name = "Java"
                        },
                        new
                        {
                            SkillId = new Guid("855631f1-63cf-48b8-8fe7-7d3f77e96552"),
                            Skill_Name = "Spring"
                        },
                        new
                        {
                            SkillId = new Guid("78ea7caf-e080-43a2-a4c3-0eb301d453c6"),
                            Skill_Name = "Kotlin"
                        },
                        new
                        {
                            SkillId = new Guid("5a81a14b-1170-4c5c-b4de-47764c6fb57a"),
                            Skill_Name = "Swift"
                        },
                        new
                        {
                            SkillId = new Guid("117a0a27-5dd3-4381-b764-ac7c6d7f8855"),
                            Skill_Name = "Objective-C"
                        },
                        new
                        {
                            SkillId = new Guid("39b71b6c-82d6-4edd-8581-cf45d7b69d5d"),
                            Skill_Name = "Ruby"
                        },
                        new
                        {
                            SkillId = new Guid("a7c9c1dc-8aad-4ab8-b1bc-6e03fb118fbc"),
                            Skill_Name = "Rails"
                        },
                        new
                        {
                            SkillId = new Guid("50e36203-c98c-4daa-b83d-418ec77e7fbd"),
                            Skill_Name = "PHP"
                        },
                        new
                        {
                            SkillId = new Guid("e1c57374-5492-4441-80a1-148d6b1bd98f"),
                            Skill_Name = "C#"
                        },
                        new
                        {
                            SkillId = new Guid("f12af59b-912b-4c58-95aa-52e79fdf5ef0"),
                            Skill_Name = "ASP.NET"
                        },
                        new
                        {
                            SkillId = new Guid("f7b9a546-0979-47e7-9cb2-7f5c6a43d7db"),
                            Skill_Name = "Azure"
                        },
                        new
                        {
                            SkillId = new Guid("dd2f5d8f-fdd5-44eb-b52c-d2764212f955"),
                            Skill_Name = "AWS"
                        },
                        new
                        {
                            SkillId = new Guid("135c9c80-4c07-44e0-930a-b04d4c852090"),
                            Skill_Name = "GCP"
                        },
                        new
                        {
                            SkillId = new Guid("cda91beb-4ca8-4e2d-814c-a64f5eec3514"),
                            Skill_Name = "SQL"
                        },
                        new
                        {
                            SkillId = new Guid("1b1478ef-c436-4b12-a62b-6f7f7a5b68ab"),
                            Skill_Name = "NoSQL"
                        },
                        new
                        {
                            SkillId = new Guid("a8485575-7c3d-42f2-b95f-0d2048e97687"),
                            Skill_Name = "Docker"
                        },
                        new
                        {
                            SkillId = new Guid("63ef03b5-9c5a-4a86-873a-50b5a5096d70"),
                            Skill_Name = "Kubernetes"
                        },
                        new
                        {
                            SkillId = new Guid("75bee84d-e780-48f8-8120-67081bd8fb28"),
                            Skill_Name = "GraphQL"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Title", b =>
                {
                    b.Property<Guid>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TitleId");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            TitleId = new Guid("7955f03c-7700-43b9-b791-2695ef8dcede"),
                            TitleName = "Full Stack Developer"
                        },
                        new
                        {
                            TitleId = new Guid("cb33b182-80f5-40dd-83b5-400f3c8ed587"),
                            TitleName = "Front End Developer"
                        },
                        new
                        {
                            TitleId = new Guid("33c0afdc-694c-4c13-b372-3cf0ee26d427"),
                            TitleName = "Back End Developer"
                        },
                        new
                        {
                            TitleId = new Guid("6bc0a051-825f-40a3-a882-79a6a00cc104"),
                            TitleName = "Software Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("5f4d4d1b-db11-44de-b402-5b982169cd6e"),
                            TitleName = "Data Scientist"
                        },
                        new
                        {
                            TitleId = new Guid("7e288b69-93f7-450b-b706-6c71d52c5851"),
                            TitleName = "DevOps Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("f14196e1-4191-4859-b349-d2aa820122d5"),
                            TitleName = "Product Manager"
                        },
                        new
                        {
                            TitleId = new Guid("1e77f0bc-cd29-4bf1-87c4-967d992e8056"),
                            TitleName = "Project Manager"
                        },
                        new
                        {
                            TitleId = new Guid("200d443e-6787-4e5d-b96a-5d9ebc3c5bf5"),
                            TitleName = "Business Analyst"
                        },
                        new
                        {
                            TitleId = new Guid("b1057ccf-5c97-4342-a852-460179db8b55"),
                            TitleName = "QA Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("865d78d3-fe76-41ab-851d-475f23250a0a"),
                            TitleName = "UI/UX Designer"
                        },
                        new
                        {
                            TitleId = new Guid("6df53d9d-4ea5-4080-94b4-be33e793798b"),
                            TitleName = "Mobile Developer"
                        },
                        new
                        {
                            TitleId = new Guid("9a41095b-7a83-4de3-9e30-00ffce59bd56"),
                            TitleName = "Security Analyst"
                        },
                        new
                        {
                            TitleId = new Guid("ce390c5d-5b8a-4f89-911c-58d320dfa47a"),
                            TitleName = "Network Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("02ec8dd6-bfc1-4b8c-b95c-e168d97fe645"),
                            TitleName = "Systems Administrator"
                        },
                        new
                        {
                            TitleId = new Guid("6206235b-4228-4c72-9f35-50e9bceb7f89"),
                            TitleName = "Database Administrator"
                        },
                        new
                        {
                            TitleId = new Guid("c02c55e9-1b82-4d1d-8953-684c4336e6a1"),
                            TitleName = "Cloud Architect"
                        },
                        new
                        {
                            TitleId = new Guid("42661970-2ab3-4636-884c-b49aec4e4912"),
                            TitleName = "Machine Learning Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("4788eaef-1467-4570-bd6e-ed2e542d558b"),
                            TitleName = "Artificial Intelligence Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("4c307494-2b76-4271-ba98-41559ce4bbe6"),
                            TitleName = "Technical Support Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("55d43346-ca04-46a3-8671-65f7044002eb"),
                            TitleName = "Cloud Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("467af571-0141-4f4d-8aba-5b9778da34e5"),
                            TitleName = "Database Developer"
                        },
                        new
                        {
                            TitleId = new Guid("e8f45d90-c0d3-41f0-93bc-d3aa4670cae1"),
                            TitleName = "Blockchain Developer"
                        },
                        new
                        {
                            TitleId = new Guid("7a808ae3-e104-4e46-a849-0e9eb1c3ff7b"),
                            TitleName = "Game Developer"
                        },
                        new
                        {
                            TitleId = new Guid("16c5d006-2ad3-495e-a28a-a848531448d9"),
                            TitleName = "VR/AR Developer"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("HasCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioLink")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("bae1166a-75fd-4cc7-864c-711a14f33081"),
                            Dob = new DateOnly(2020, 1, 1),
                            Email = "Admin@jobportal.com",
                            HasCode = new byte[] { 64, 168, 173, 35, 170, 162, 26, 101, 7, 116, 28, 110, 21, 189, 47, 159, 68, 180, 31, 32, 151, 188, 134, 48, 250, 148, 182, 103, 6, 41, 88, 179, 179, 9, 207, 158, 175, 89, 19, 123, 160, 134, 36, 20, 227, 239, 201, 128, 80, 155, 101, 59, 228, 94, 62, 38, 61, 196, 154, 26, 163, 197, 206, 176, 201, 234, 46, 44, 172, 145, 93, 141, 137, 155, 215, 253, 69, 36, 29, 151, 44, 216, 23, 40, 143, 80, 16, 21, 84, 207, 173, 130, 250, 119, 2, 212, 27, 193, 86, 63, 29, 175, 146, 243, 191, 52, 216, 201, 239, 227, 195, 36, 146, 96, 80, 205, 57, 14, 28, 10, 188, 171, 64, 214, 123, 104, 31, 65 },
                            Name = "Admin",
                            Password = new byte[] { 214, 72, 129, 159, 116, 176, 175, 144, 193, 214, 211, 104, 204, 229, 164, 66, 229, 212, 236, 95, 205, 242, 248, 145, 102, 158, 253, 177, 156, 129, 236, 32, 61, 29, 42, 220, 133, 197, 240, 184, 162, 217, 51, 195, 159, 48, 236, 128, 104, 161, 198, 31, 31, 62, 229, 51, 178, 173, 211, 69, 150, 197, 178, 241 }
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.UserSkills", b =>
                {
                    b.Property<Guid>("UserSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserSkillsId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.AreasOfInterest", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("AreasOfInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Education", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Experience", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobActivity", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Job", "Job")
                        .WithMany("JobActivities")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", "User")
                        .WithMany("JobActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobSkills", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.UserSkills", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.Navigation("JobActivities");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.User", b =>
                {
                    b.Navigation("AreasOfInterests");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("JobActivities");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
