// <auto-generated />
using System;
using Job_Portal_Application.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Job_Portal_Application.Migrations
{
    [DbContext(typeof(JobportalContext))]
    partial class JobportalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Job_Portal_Application.Models.AreasOfInterest", b =>
                {
                    b.Property<Guid>("AreasOfInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Lpa")
                        .HasColumnType("real");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AreasOfInterestId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("AreasOfInterests");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CompanySize")
                        .HasColumnType("int");

                    b.Property<string>("CompanyWebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CredentialId")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Credential", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("HasCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialId");

                    b.ToTable("Credential");

                    b.HasData(
                        new
                        {
                            CredentialId = new Guid("bf0e4d0f-f8d4-4bb5-839e-2f34d9f6c6a4"),
                            HasCode = new byte[] { 175, 190, 82, 206, 212, 81, 147, 103, 88, 133, 20, 39, 116, 242, 32, 37, 170, 74, 129, 155, 240, 246, 132, 222, 19, 225, 149, 8, 30, 114, 94, 140, 61, 131, 5, 95, 80, 1, 181, 248, 249, 67, 153, 16, 94, 231, 213, 241, 185, 235, 182, 152, 65, 200, 111, 168, 104, 143, 39, 120, 207, 236, 177, 65, 205, 165, 57, 225, 30, 163, 105, 199, 211, 153, 61, 186, 81, 95, 254, 155, 10, 70, 103, 172, 90, 130, 81, 216, 58, 28, 195, 130, 245, 159, 35, 48, 37, 114, 67, 148, 75, 209, 40, 119, 82, 76, 144, 179, 203, 85, 162, 245, 175, 64, 95, 148, 127, 85, 210, 208, 65, 87, 175, 73, 183, 159, 150, 115 },
                            Password = new byte[] { 235, 223, 233, 148, 68, 3, 186, 239, 233, 35, 249, 7, 131, 190, 72, 211, 88, 35, 50, 61, 43, 128, 14, 58, 121, 31, 171, 146, 157, 63, 94, 27, 86, 4, 134, 63, 242, 139, 2, 152, 132, 1, 200, 84, 234, 64, 194, 47, 223, 243, 213, 205, 164, 162, 233, 77, 131, 65, 67, 144, 15, 12, 31, 50 },
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Education", b =>
                {
                    b.Property<Guid>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndYear")
                        .HasColumnType("date");

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsCurrentlyStudying")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Percentage")
                        .HasColumnType("real");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EducationId");

                    b.HasIndex("UserId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Experience", b =>
                {
                    b.Property<Guid>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly>("EndYear")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartYear")
                        .HasColumnType("date");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExperienceId");

                    b.HasIndex("TitleId");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.Property<Guid>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DatePosted")
                        .HasColumnType("date");

                    b.Property<float?>("ExperienceRequired")
                        .HasColumnType("real");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("JobType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Lpa")
                        .HasColumnType("real");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("TitleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TitleId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobActivity", b =>
                {
                    b.Property<Guid>("JobApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AppliedDate")
                        .HasColumnType("date");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ResumeViewed")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobApplicationId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobActivities");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobSkills", b =>
                {
                    b.Property<Guid>("JobSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("JobSkillsId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Skill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Skill_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillId = new Guid("eebe1e66-ef0d-4553-bdab-8e1e43e13654"),
                            Skill_Name = "HTML"
                        },
                        new
                        {
                            SkillId = new Guid("64e264cc-8016-4664-8e9d-e2c9eaa05b06"),
                            Skill_Name = "CSS"
                        },
                        new
                        {
                            SkillId = new Guid("0cd2f7f3-0517-45b4-a6fa-2c9d76074ec1"),
                            Skill_Name = "JavaScript"
                        },
                        new
                        {
                            SkillId = new Guid("b7882aa1-76f3-40b1-9d61-79078c44c3fb"),
                            Skill_Name = "TypeScript"
                        },
                        new
                        {
                            SkillId = new Guid("6f5c05b7-3190-400d-a186-ab9652e42272"),
                            Skill_Name = "React"
                        },
                        new
                        {
                            SkillId = new Guid("94d7866d-10be-4ffe-91ee-5226ad334718"),
                            Skill_Name = "Angular"
                        },
                        new
                        {
                            SkillId = new Guid("8a99acb2-9790-42c2-be31-54046fcb9460"),
                            Skill_Name = "Vue"
                        },
                        new
                        {
                            SkillId = new Guid("aae52f4c-f9c2-410f-98c2-033f2175290c"),
                            Skill_Name = "Node.js"
                        },
                        new
                        {
                            SkillId = new Guid("a0b6b1c1-0d10-4812-b273-11e6dbeb4563"),
                            Skill_Name = "Express"
                        },
                        new
                        {
                            SkillId = new Guid("7056dbd6-4c81-47ea-b713-e899455a9004"),
                            Skill_Name = "Python"
                        },
                        new
                        {
                            SkillId = new Guid("339124dc-5fce-4c69-b210-bf05e7f5f911"),
                            Skill_Name = "Django"
                        },
                        new
                        {
                            SkillId = new Guid("af533f0f-ecc5-4f7d-8bc5-ff79171d3f3f"),
                            Skill_Name = "Flask"
                        },
                        new
                        {
                            SkillId = new Guid("afaa26f2-3aee-47b0-b0ea-4c330e32f946"),
                            Skill_Name = "Java"
                        },
                        new
                        {
                            SkillId = new Guid("9638c0eb-92a5-4d56-8e5d-2b7af35eb151"),
                            Skill_Name = "Spring"
                        },
                        new
                        {
                            SkillId = new Guid("6dbea15b-4d00-4903-a393-1e357087bc88"),
                            Skill_Name = "Kotlin"
                        },
                        new
                        {
                            SkillId = new Guid("7830b613-ce28-4069-be79-98358adf7383"),
                            Skill_Name = "Swift"
                        },
                        new
                        {
                            SkillId = new Guid("b2e0a690-7970-4aef-96d4-e0aec6d83db0"),
                            Skill_Name = "Objective-C"
                        },
                        new
                        {
                            SkillId = new Guid("bdd2f762-9087-40d7-b78a-0127b1089024"),
                            Skill_Name = "Ruby"
                        },
                        new
                        {
                            SkillId = new Guid("f09467df-beff-426d-9bc3-18b7fbade7be"),
                            Skill_Name = "Rails"
                        },
                        new
                        {
                            SkillId = new Guid("2a01f190-37f4-450a-85d7-612b21b94741"),
                            Skill_Name = "PHP"
                        },
                        new
                        {
                            SkillId = new Guid("5c6d5d20-c617-4a85-af97-068a8d51bee6"),
                            Skill_Name = "C#"
                        },
                        new
                        {
                            SkillId = new Guid("96f32405-41e3-4902-a6d0-1e5f25c3556e"),
                            Skill_Name = "ASP.NET"
                        },
                        new
                        {
                            SkillId = new Guid("6ef9e759-afbb-4db1-b981-c2f9d0f09628"),
                            Skill_Name = "Azure"
                        },
                        new
                        {
                            SkillId = new Guid("a9ebd29d-7bbe-4ab5-a6f4-98aaa3a4dc1c"),
                            Skill_Name = "AWS"
                        },
                        new
                        {
                            SkillId = new Guid("63e1cada-ae43-440c-9e4d-b7d290102fcf"),
                            Skill_Name = "GCP"
                        },
                        new
                        {
                            SkillId = new Guid("7188bf2f-7510-4007-9ebb-b75a4a2f5e87"),
                            Skill_Name = "SQL"
                        },
                        new
                        {
                            SkillId = new Guid("7ace8f9d-20c5-4351-9693-f3f993ef9c1a"),
                            Skill_Name = "NoSQL"
                        },
                        new
                        {
                            SkillId = new Guid("c1ee1fe1-adbf-47dd-b9a7-0cc2bcd1ddde"),
                            Skill_Name = "Docker"
                        },
                        new
                        {
                            SkillId = new Guid("be1fdbf5-9a8d-4952-9847-460283851002"),
                            Skill_Name = "Kubernetes"
                        },
                        new
                        {
                            SkillId = new Guid("fbabc07e-3d81-4fc8-a845-1d2ed7f0e3ac"),
                            Skill_Name = "GraphQL"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Title", b =>
                {
                    b.Property<Guid>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("TitleId");

                    b.ToTable("Titles");

                    b.HasData(
                        new
                        {
                            TitleId = new Guid("fb5bda27-edeb-4975-8073-b6789d28e1e3"),
                            TitleName = "Full Stack Developer"
                        },
                        new
                        {
                            TitleId = new Guid("66ea45c7-940f-4be7-8839-b2c596f0c453"),
                            TitleName = "Front End Developer"
                        },
                        new
                        {
                            TitleId = new Guid("13d44e5e-fb16-4082-8ee6-0f14644ad351"),
                            TitleName = "Back End Developer"
                        },
                        new
                        {
                            TitleId = new Guid("a7d53d1e-3216-491e-acf5-bd6ff1edae17"),
                            TitleName = "Software Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("f4e4cc47-887e-4307-b791-d1ba394302c1"),
                            TitleName = "Data Scientist"
                        },
                        new
                        {
                            TitleId = new Guid("8f9a3186-dff7-4021-a734-4d9a6558b58e"),
                            TitleName = "DevOps Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("a85f6f91-74de-41a7-bfe3-e3d6cfccb6da"),
                            TitleName = "Product Manager"
                        },
                        new
                        {
                            TitleId = new Guid("e99192b0-d290-44af-8055-8d957e559a95"),
                            TitleName = "Project Manager"
                        },
                        new
                        {
                            TitleId = new Guid("a118d173-bd94-4b0b-ba33-53583f61dd42"),
                            TitleName = "Business Analyst"
                        },
                        new
                        {
                            TitleId = new Guid("67ac4dac-224f-4203-8b3e-389d7f71cd35"),
                            TitleName = "QA Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("eef31387-03b9-4c22-9b65-ac3a2fb567fb"),
                            TitleName = "UI/UX Designer"
                        },
                        new
                        {
                            TitleId = new Guid("1a28a1ff-6104-494a-a40a-dbd07d0f9bf1"),
                            TitleName = "Mobile Developer"
                        },
                        new
                        {
                            TitleId = new Guid("3d383f12-ac3e-48f5-bee1-f8bed2be225f"),
                            TitleName = "Security Analyst"
                        },
                        new
                        {
                            TitleId = new Guid("2daa4567-9097-47ce-a58a-9fff4e819da2"),
                            TitleName = "Network Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("77f4bba6-63cc-437b-9d0f-15130f857e6a"),
                            TitleName = "Systems Administrator"
                        },
                        new
                        {
                            TitleId = new Guid("69318531-1e75-4a65-b577-2e1dab59c618"),
                            TitleName = "Database Administrator"
                        },
                        new
                        {
                            TitleId = new Guid("af7f51e1-674b-4213-8197-f2cb0295106b"),
                            TitleName = "Cloud Architect"
                        },
                        new
                        {
                            TitleId = new Guid("c3abb7e8-7f9c-44e5-a0f8-49303c3dc0f6"),
                            TitleName = "Machine Learning Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("fcb3e80e-42a4-400c-967e-29e838af9f24"),
                            TitleName = "Artificial Intelligence Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("42898179-9b26-4672-86b0-b6ce3861a5f1"),
                            TitleName = "Technical Support Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("b9400096-5e2c-465c-a3ad-a03f7180cd27"),
                            TitleName = "Cloud Engineer"
                        },
                        new
                        {
                            TitleId = new Guid("ac8c829b-5fe8-47c1-bf8c-ca8846b1635c"),
                            TitleName = "Database Developer"
                        },
                        new
                        {
                            TitleId = new Guid("85b38a56-8a33-48d2-aa27-02569392a714"),
                            TitleName = "Blockchain Developer"
                        },
                        new
                        {
                            TitleId = new Guid("b81b4844-7b5f-4487-934b-bd54f9709390"),
                            TitleName = "Game Developer"
                        },
                        new
                        {
                            TitleId = new Guid("5fa9ea7f-5efc-4f67-9bfa-b0bf5b605ffb"),
                            TitleName = "VR/AR Developer"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phonenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PortfolioLink")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ResumeUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.HasIndex("CredentialId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("904f7da1-79a2-45a8-b727-fbf4662609cb"),
                            CredentialId = new Guid("bf0e4d0f-f8d4-4bb5-839e-2f34d9f6c6a4"),
                            Dob = new DateOnly(1, 1, 1),
                            Email = "Admin@jobportal.com",
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Job_Portal_Application.Models.UserSkills", b =>
                {
                    b.Property<Guid>("UserSkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserSkillsId");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.AreasOfInterest", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("AreasOfInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Company", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Credential", "Credential")
                        .WithOne()
                        .HasForeignKey("Job_Portal_Application.Models.Company", "CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credential");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Education", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Experience", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", null)
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobActivity", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Job", "Job")
                        .WithMany("JobActivities")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", "User")
                        .WithMany("JobActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.JobSkills", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Job", "Job")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.User", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Credential", "Credential")
                        .WithOne()
                        .HasForeignKey("Job_Portal_Application.Models.User", "CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credential");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.UserSkills", b =>
                {
                    b.HasOne("Job_Portal_Application.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Job_Portal_Application.Models.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.Job", b =>
                {
                    b.Navigation("JobActivities");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("Job_Portal_Application.Models.User", b =>
                {
                    b.Navigation("AreasOfInterests");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("JobActivities");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
